public abstract class Transportation {
    protected String name;
    protected int capacity;
    protected double speed;
    
    public Transportation(String name, int capacity, double speed) {
        this.name = name;
        this.capacity = capacity;
        this.speed = speed;
    }
    
    public abstract void move();
    public abstract void stop();
    
    public void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Capacity: " + capacity + " people");
        System.out.println("Max Speed: " + speed + " km/h");
    }
}

// AirTransport.java
public abstract class AirTransport extends Transportation {
    protected double altitude;
    
    public AirTransport(String name, int capacity, double speed, double altitude) {
        super(name, capacity, speed);
        this.altitude = altitude;
    }
    
    public void takeOff() {
        System.out.println(name + " is taking off...");
    }
    
    public void land() {
        System.out.println(name + " is landing...");
    }
}

// Airplane.java
public class Airplane extends AirTransport {
    private int wingspan;
    
    public Airplane(String name, int capacity, double speed, double altitude, int wingspan) {
        super(name, capacity, speed, altitude);
        this.wingspan = wingspan;
    }
    
    @Override
    public void move() {
        System.out.println("Airplane is flying at " + speed + " km/h");
    }
    
    @Override
    public void stop() {
        System.out.println("Airplane has landed and stopped");
    }
    
    public void deployLandingGear() {
        System.out.println("Landing gear deployed");
    }
}

// Helicopter.java
public class Helicopter extends AirTransport {
    private int rotorCount;
    
    public Helicopter(String name, int capacity, double speed, double altitude, int rotorCount) {
        super(name, capacity, speed, altitude);
        this.rotorCount = rotorCount;
    }
    
    @Override
    public void move() {
        System.out.println("Helicopter is hovering and moving");
    }
    
    @Override
    public void stop() {
        System.out.println("Helicopter is hovering in place");
    }
    
    public void verticalTakeOff() {
        System.out.println("Vertical takeoff initiated");
    }
}

// LandTransport.java
public abstract class LandTransport extends Transportation {
    protected int wheelCount;
    
    public LandTransport(String name, int capacity, double speed, int wheelCount) {
        super(name, capacity, speed);
        this.wheelCount = wheelCount;
    }
    
    public void honk() {
        System.out.println("Honk! Honk!");
    }
}

// Truck.java
public class Truck extends LandTransport {
    private double cargoCapacity;
    
    public Truck(String name, int capacity, double speed, int wheelCount, double cargoCapacity) {
        super(name, capacity, speed, wheelCount);
        this.cargoCapacity = cargoCapacity;
    }
    
    @Override
    public void move() {
        System.out.println("Truck is driving on the road");
    }
    
    @Override
    public void stop() {
        System.out.println("Truck has stopped");
    }
    
    public void loadCargo() {
        System.out.println("Loading " + cargoCapacity + " tons of cargo");
    }
}

// SUV.java
public class SUV extends LandTransport {
    private boolean fourWheelDrive;
    
    public SUV(String name, int capacity, double speed, int wheelCount, boolean fourWheelDrive) {
        super(name, capacity, speed, wheelCount);
        this.fourWheelDrive = fourWheelDrive;
    }
    
    @Override
    public void move() {
        System.out.println("SUV is cruising on the highway");
    }
    
    @Override
    public void stop() {
        System.out.println("SUV has parked");
    }
    
    public void toggle4WD() {
        fourWheelDrive = !fourWheelDrive;
        System.out.println("4WD " + (fourWheelDrive ? "enabled" : "disabled"));
    }
}

// Tricycle.java
public class Tricycle extends LandTransport {
    private boolean hasSidecar;
    
    public Tricycle(String name, int capacity, double speed, int wheelCount, boolean hasSidecar) {
        super(name, capacity, speed, wheelCount);
        this.hasSidecar = hasSidecar;
    }
    
    @Override
    public void move() {
        System.out.println("Tricycle is pedaling slowly");
    }
    
    @Override
    public void stop() {
        System.out.println("Tricycle has stopped pedaling");
    }
    
    public void ringBell() {
        System.out.println("Ring! Ring!");
    }
}

// Motorcycle.java
public class Motorcycle extends LandTransport {
    private String engineType;
    
    public Motorcycle(String name, int capacity, double speed, int wheelCount, String engineType) {
        super(name, capacity, speed, wheelCount);
        this.engineType = engineType;
    }
    
    @Override
    public void move() {
        System.out.println("Motorcycle is zooming through traffic");
    }
    
    @Override
    public void stop() {
        System.out.println("Motorcycle has stopped with a skid");
    }
    
    public void wheelie() {
        System.out.println("Doing a wheelie!");
    }
}

// Kariton.java
public class Kariton extends LandTransport {
    private boolean hasCover;
    
    public Kariton(String name, int capacity, double speed, int wheelCount, boolean hasCover) {
        super(name, capacity, speed, wheelCount);
        this.hasCover = hasCover;
    }
    
    @Override
    public void move() {
        System.out.println("Kariton is being pulled slowly");
    }
    
    @Override
    public void stop() {
        System.out.println("Kariton has stopped moving");
    }
    
    public void openCover() {
        if (hasCover) {
            System.out.println("Opening the cover");
        }
    }
}

// WaterTransport.java
public abstract class WaterTransport extends Transportation {
    protected double displacement;
    
    public WaterTransport(String name, int capacity, double speed, double displacement) {
        super(name, capacity, speed);
        this.displacement = displacement;
    }
    
    public void anchor() {
        System.out.println("Dropping anchor");
    }
}

// Ship.java
public class Ship extends WaterTransport {
    private int deckCount;
    
    public Ship(String name, int capacity, double speed, double displacement, int deckCount) {
        super(name, capacity, speed, displacement);
        this.deckCount = deckCount;
    }
    
    @Override
    public void move() {
        System.out.println("Ship is sailing on the water");
    }
    
    @Override
    public void stop() {
        System.out.println("Ship has dropped anchor and stopped");
    }
    
    public void soundHorn() {
        System.out.println("Booooooom! (Ship horn)");
    }
}

// Boat.java
public class Boat extends WaterTransport {
    private String propulsionType;
    
    public Boat(String name, int capacity, double speed, double displacement, String propulsionType) {
        super(name, capacity, speed, displacement);
        this.propulsionType = propulsionType;
    }
    
    @Override
    public void move() {
        System.out.println("Boat is moving on water with " + propulsionType + " propulsion");
    }
    
    @Override
    public void stop() {
        System.out.println("Boat has stopped floating");
    }
    
    public void row() {
        if (propulsionType.equals("manual")) {
            System.out.println("Rowing the boat");
        }
    }
}
